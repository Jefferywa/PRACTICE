        -:    0:Source:func.cpp
        -:    0:Programs:3
        -:    1:#include "func.h"
        -:    2:
        -:    3:using namespace std;
        -:    4:
        -:    5:
        3:    6:void sFile(internetStore *&first) 
        -:    7:{
        6:    8:    ofstream out("storage.txt");
        3:    9:    if (out)
        -:   10:    {
        -:   11:        internetStore *buf;
        3:   12:        buf = first;
        3:   13:        bool flag = true;
        7:   14:        while (buf != NULL)
        -:   15:        {
        -:   16:            int len;
        2:   17:            len = first->title.length();
        -:   18:
        2:   19:            out.write((char *)&len, sizeof(len)); //
        2:   20:            if (!out)
        -:   21:            {
    #####:   22:                flag = false;
        -:   23:            }
        -:   24:
        2:   25:            if (flag)
        2:   26:                out.write(buf->title.c_str(), len);
        2:   27:            if (!out)
        -:   28:            {
    #####:   29:                flag = false;
        -:   30:            }
        -:   31:
        2:   32:            len = buf->desc.length();
        -:   33:
        2:   34:            if (flag)
        2:   35:                out.write((char *)&len, sizeof(len));
        2:   36:            if (!out)
        -:   37:            {
    #####:   38:                flag = false;
        -:   39:            }
        -:   40:
        2:   41:            if (flag)
        2:   42:                out.write(buf->desc.c_str(), len);
        2:   43:            if (!out)
        -:   44:            {
    #####:   45:                flag = false;
        -:   46:            }
        -:   47:
        2:   48:            len = first->price.length();
        -:   49:
        2:   50:            out.write((char *)&len, sizeof(len));
        2:   51:            if (!out)
        -:   52:            {
    #####:   53:                flag = false;
        -:   54:            }
        -:   55:
        2:   56:            if (flag)
        2:   57:                out.write(buf->price.c_str(), len);
        2:   58:            if (!out)
        -:   59:            {
    #####:   60:                flag = false;
        -:   61:            }
        -:   62:
        2:   63:            len = buf->category.length();
        -:   64:
        2:   65:            out.write((char *)&len, sizeof(len));
        2:   66:            if (!out)
        -:   67:            {
    #####:   68:                flag = false;
        -:   69:            }
        -:   70:
        2:   71:            if (flag)
        2:   72:                out.write(buf->category.c_str(), len);
        2:   73:            if (!out)
        -:   74:            {
    #####:   75:                flag = false;
        -:   76:            }
        -:   77:
        2:   78:            buf = buf->next;
        -:   79:        }
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        cout << "ERROR: open file";
        -:   84:    }
        3:   85:}
        -:   86:
        2:   87:void lFile(internetStore *&first, internetStore *&last)
        -:   88:{
        2:   89:    first = NULL;
        2:   90:    if (checkFile("storage.txt"))
        -:   91:    {
        -:   92:        internetStore *f;
        -:   93:        bool flag;
        2:   94:        flag = true;
        4:   95:        ifstream in("storage.txt");
        6:   96:        while ((!in.eof()) && (flag))
        -:   97:        {
        -:   98:
        2:   99:            if (f = new internetStore)
        -:  100:            {
        -:  101:                int i, len;
        -:  102:                char chr;
        -:  103:
        2:  104:                f->title = "";
        2:  105:                in.read((char *)&len, sizeof(len));
        -:  106:
        2:  107:                if (!in)
        -:  108:                {
        2:  109:                    flag = false;
        -:  110:                }
        -:  111:
        2:  112:                if ((!in.eof()) && (flag))
        -:  113:                {
    #####:  114:                    for (i = 0; i < len; i++)
        -:  115:                    {
    #####:  116:                        in.read((char *)&chr, 1);
    #####:  117:                        if (!in)
        -:  118:                        {
    #####:  119:                            flag = false;
        -:  120:                        }
        -:  121:                        else
        -:  122:                        {
    #####:  123:                            f->title = f->title + chr;
        -:  124:                        }
        -:  125:                    }
        -:  126:                }
        -:  127:
        2:  128:                f->desc = "";
        2:  129:                in.read((char *)&len, sizeof(len));
        2:  130:                if (!in)
        -:  131:                {
        2:  132:                    flag = false;
        -:  133:                }
        -:  134:                else
        -:  135:                {
    #####:  136:                    for (i = 0; i < len; i++)
        -:  137:                    {
    #####:  138:                        in.read((char *)&chr, 1);
    #####:  139:                        f->desc = f->desc + chr;
        -:  140:                    }
        -:  141:                }
        -:  142:
        2:  143:                f->price = "";
        2:  144:                in.read((char *)&len, sizeof(len));
        2:  145:                if (!in)
        -:  146:                {
        2:  147:                    flag = false;
        -:  148:                }
        -:  149:                else
        -:  150:                {
    #####:  151:                    for (i = 0; i < len; i++)
        -:  152:                    {
    #####:  153:                        in.read((char *)&chr, 1);
    #####:  154:                        f->price = f->price + chr;
        -:  155:                    }
        -:  156:                }
        -:  157:
        2:  158:                f->category = "";
        2:  159:                in.read((char *)&len, sizeof(len));
        2:  160:                if (!in)
        -:  161:                {
        2:  162:                    flag = false;
        -:  163:                }
        -:  164:                else
        -:  165:                {
    #####:  166:                    for (i = 0; i < len; i++)
        -:  167:                    {
    #####:  168:                        in.read((char *)&chr, 1);
    #####:  169:                        f->category = f->category + chr;
        -:  170:                    }
        -:  171:                }
        -:  172:
        2:  173:                if ((!in.eof()) && (flag))
        -:  174:                {
    #####:  175:                    if (first == NULL)
        -:  176:                    {
    #####:  177:                        first = f;
    #####:  178:                        last = first;
        -:  179:                    }
        -:  180:                    else
        -:  181:                    {
    #####:  182:                        last->next = f;
    #####:  183:                        f->prev = last;
    #####:  184:                        last = last->next;
        -:  185:                    }
    #####:  186:                    f->next = NULL;
        -:  187:                }
        -:  188:            }
        -:  189:            else
        -:  190:            {
    #####:  191:                cout << "ERROR: file memory access\n";
        -:  192:            }
        -:  193:        }
        2:  194:        if (!flag)
        -:  195:        {
        2:  196:            cout << "ERROR: read file\n";
        -:  197:        }
        -:  198:    }
        2:  199:}
        -:  200:
        2:  201:void enterInfo(internetStore *&buff)
        -:  202:{
        2:  203:    cout << "Enter product name: ";
        2:  204:    getline(std::cin, buff->title);
        -:  205:
        2:  206:    cout << "Enter product description: ";
        2:  207:    getline(std::cin, buff->desc);
        -:  208:
        2:  209:    cout << "Enter the price of the product: ";
        2:  210:    getline(std::cin, buff->price);
        -:  211:
        2:  212:    cout << "Enter product category: ";
        2:  213:    getline(std::cin, buff->category);
        2:  214:}
        -:  215:
        1:  216:void addInfo(internetStore *&first, internetStore *&last)
        -:  217:{
        1:  218:    internetStore *buf = 0;
        1:  219:    buf = new internetStore;
        1:  220:    enterInfo(buf);
        1:  221:    if (first == NULL)
        -:  222:    {
        1:  223:        first = buf;
        1:  224:        last = first;
        -:  225:    }
        -:  226:    else
        -:  227:    {
    #####:  228:        last->next = buf;
    #####:  229:        buf->prev = last;
    #####:  230:        last = last->next;
        -:  231:    }
        1:  232:    sFile(first);
        1:  233:}
        -:  234:
        3:  235:int showInfo(internetStore *&first)
        -:  236:{
        -:  237:    internetStore *buf;
        3:  238:    int records = 0;
        3:  239:    buf = first;
        3:  240:    int i = 1;
        9:  241:    while (buf != NULL)
        -:  242:    {
        3:  243:        records++;
        3:  244:        cout << "[" << i << "] "
        6:  245:             << "[Product title: " << buf->title << "][Product desc: " << buf->desc << "][Product price:  " << buf->price << "][Product category: " << buf->category << "]";
        3:  246:        buf = buf->next;
        3:  247:        i++;
        -:  248:    }
        3:  249:    return records;
        -:  250:}
        -:  251:
        1:  252:void deleteInfo(internetStore *&first, internetStore *&last)
        -:  253:{
        -:  254:    int records;
        1:  255:    bool end = false;
        1:  256:    records = showInfo(first);
        1:  257:    cout << "[" << records + 1 << "]Exit\n";
        -:  258:    bool flag;
        1:  259:    int number = 0;
        1:  260:    do
        -:  261:    {
        1:  262:        cout << "Records number: ";
        1:  263:        cin >> number;
        1:  264:        if (!cin)
        -:  265:        {
    #####:  266:            flag = true;
    #####:  267:            cin.clear();
    #####:  268:            cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        -:  269:        }
        -:  270:        else
        -:  271:        {
        1:  272:            if (cin.get() != '\n')
        -:  273:            {
    #####:  274:                flag = true;
    #####:  275:                cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        -:  276:            }
        -:  277:            else
        -:  278:            {
        1:  279:                if (number < 1 || number > records)
        -:  280:                {
    #####:  281:                    if (number = records = 1)
        -:  282:                    {
    #####:  283:                        end = true;
    #####:  284:                        flag = false;
        -:  285:                    }
        -:  286:                    else
        -:  287:                    {
    #####:  288:                        flag = true;
    #####:  289:                        cout << "Bad enter!\n";
    #####:  290:                        cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        -:  291:                    }
        -:  292:                }
        -:  293:                else
        1:  294:                    flag = false;
        -:  295:            }
        -:  296:        }
        -:  297:    } while (flag);
        1:  298:    if (!end)
        -:  299:    {
        -:  300:        int i;
        1:  301:        internetStore *f = first;
        1:  302:        for (i = 1; i < number; i++)
        -:  303:        {
    #####:  304:            f = f->next;
        -:  305:        }
        1:  306:        if (f->prev != NULL)
        -:  307:        {
        1:  308:            f->prev->next = f->next;
        -:  309:        }
        1:  310:        if (f->next != NULL)
        -:  311:        {
    #####:  312:            f->next->prev = f->prev;
        -:  313:        }
        1:  314:        if (f == first)
        -:  315:        {
        1:  316:            first = f->next;
        -:  317:        }
        1:  318:        if (f == last)
        -:  319:        {
        1:  320:            last = f->prev;
        -:  321:        }
        1:  322:        delete f;
        1:  323:        sFile(first);
        -:  324:    }
        1:  325:}
        -:  326:
        1:  327:void editInfo(internetStore *&first)
        -:  328:{
        -:  329:    int records;
        1:  330:    bool end = false;
        1:  331:    records = showInfo(first);
        1:  332:    cout << "[" << records + 1 << "]Exit\n";
        -:  333:    bool flag;
        1:  334:    int number = 0;
        2:  335:    do
        -:  336:    {
        2:  337:        cout << "Record's number: ";
        2:  338:        cin >> number;
        2:  339:        if (!cin)
        -:  340:        {
        1:  341:            flag = true;
        1:  342:            cin.clear();
        1:  343:            cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        -:  344:        }
        -:  345:        else
        -:  346:        {
        1:  347:            if (cin.get() != '\n')
        -:  348:            {
    #####:  349:                flag = true;
    #####:  350:                cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        -:  351:            }
        -:  352:            else
        -:  353:            {
        1:  354:                if (number < 1 || number > records)
        -:  355:                {
    #####:  356:                    if (number == records + 1)
        -:  357:                    {
    #####:  358:                        end = true;
    #####:  359:                        flag = false;
        -:  360:                    }
        -:  361:                    else
        -:  362:                    {
    #####:  363:                        flag = true;
    #####:  364:                        cout << "Bad enter!\n";
    #####:  365:                        cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        -:  366:                    }
        -:  367:                }
        -:  368:                else
        1:  369:                    flag = false;
        -:  370:            }
        -:  371:        }
        -:  372:    } while (flag);
        1:  373:    if (!end)
        -:  374:    {
        -:  375:        int i;
        1:  376:        internetStore *f = first;
        1:  377:        for (i = 1; i < number; i++)
        -:  378:        {
    #####:  379:            f = f->next;
        -:  380:        }
        1:  381:        enterInfo(f);
        -:  382:    }
        1:  383:    sFile(first);
        7:  384:}
